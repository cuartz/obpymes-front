proxy_cache_path /tmp/nginx levels=1:2 keys_zone=cache:1m inactive=24h use_temp_path=off;
server {
    listen 80;
    server_name localhost;
        gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    location /nginx_status {
        stub_status on;
        access_log   off;
        allow 127.0.0.1;
        allow 10.1.0.0/16;
        deny all;
    }

    <% if ENV["CONFIG_END_POINT"] %>
        location /config.json_default_ {
            alias /usr/share/nginx/html/config.json;
        }

        location /config.json {
            if ($args ~ "^default=true") {
                rewrite ^(.*)$ /config.json_default_;
            }
            add_header X-Config-Overriden true;
            proxy_pass <%= ENV["CONFIG_END_POINT"] %>;
            proxy_ignore_headers Cache-Control; # permite ignorar el valor de max-age en la cabecera Cache-Control y que aplique el valor en proxy_cache_valid
            proxy_cache_bypass $cookie_nocache $arg_nocache; # permite hacer bypass de la cache, por ejemplo http://<IP>:<PORT>/<PATH>?nocache=true
            proxy_cache cache;  # habilita la cache
            proxy_cache_lock on; # si llegan varias peticiones en paralelo sï¿½lo se realiza una al backend
            proxy_cache_valid 200 5m; # cache durante 5 minutos las peticiones 200 del backend
            proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504 http_403 http_404; # mantiene el elmento de cache en caso de expirar, cuando da esos errores el backend
        }

    <% end %>

    <% if ENV["JSON_CONFIG"] %>
        location /config.json_default_ {
            alias /usr/share/nginx/html/config.json;
        }

        location /config.json_overriden_ {
            add_header X-Config-Overriden true;
            add_header Content-Type application/json;
            return 200 '<%= ENV["JSON_CONFIG"] %>';
        }

        location /config.json {
            if ($args ~ "^default=true") {
                rewrite ^(.*)$ /config.json_default_;
            }
            if ($args !~ "^default=true") {
                rewrite ^(.*)$ /config.json_overriden_;
            }
        }
    <% end %>
	
	location /token {
			proxy_method GET;
			add_header Set-Cookie $request_body;
			proxy_pass http://localhost/index.html;
    }
		
    location / {
        if ($request_method = POST ) {
            return 200;
        }
        root /usr/share/nginx/html;
        index index.html index.htm Default.htm;
        add_header X-UA-Compatible IE=Edge;

        <% if !ENV["PUBLIC"] %>
        <% if File.exists?(auth_file = File.join(ENV["APP_HOME"], "conf.d/.htpasswd")) %>
            auth_basic "Restricted";                                #For Basic Auth
            auth_basic_user_file <%= auth_file %>;  #For Basic Auth
        <% end %>
        <% end %>
    }
}
